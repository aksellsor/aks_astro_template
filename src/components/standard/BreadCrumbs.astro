---
let PUBLIC_LOCALES = import.meta.env.PUBLIC_LOCALES?.split(',');
let PUBLIC_UMBRACO_ROOT_NODE = import.meta.env.PUBLIC_UMBRACO_ROOT_NODE;
const path = Astro.url.pathname;
const getBreadcrumbs = (path) => {
  let pathParts = path?.split('/').filter((part) => part?.trim() !== '');
  let parts = [];
  let foreignLang = PUBLIC_LOCALES.includes(pathParts[0]);
  if (!foreignLang) parts = ['', ...pathParts];
  else parts = pathParts;

  return parts?.map((part, partIndex) => {
    const previousParts = parts.slice(0, partIndex);
    // let prevSlugs = previousParts?.join('/');
    return {
      label: part,
      href:
        previousParts?.length > 0
          ? `${foreignLang ? PUBLIC_UMBRACO_ROOT_NODE : ''}${previousParts?.join('/')}/${part}`
          : `/${part}`,
    };
  });
};
let crumbs = getBreadcrumbs(path);
---

<div class='crumbs'>
  {
    crumbs?.map((crumb, index) => (
      <a href={crumb.href}>
        {index === 0 ? (
          <svg
            stroke='currentColor'
            width='1em'
            height='1em'
            fill='currentColor'
            stroke-width='0'
            viewBox='0 0 20 20'
            aria-hidden='true'
            xmlns='http://www.w3.org/2000/svg'>
            <path d='M10.707 2.293a1 1 0 00-1.414 0l-7 7a1 1 0 001.414 1.414L4 10.414V17a1 1 0 001 1h2a1 1 0 001-1v-2a1 1 0 011-1h2a1 1 0 011 1v2a1 1 0 001 1h2a1 1 0 001-1v-6.586l.293.293a1 1 0 001.414-1.414l-7-7z' />
          </svg>
        ) : (
          crumb.label
        )}
      </a>
    ))
  }
</div>

<style>
  .crumbs {
    display: flex;
    flex-wrap: wrap;
    gap: 0.25rem;
  }
  .crumbs a::first-letter {
    text-transform: capitalize;
  }
  .crumbs a {
    color: inherit;
    padding: 0.5em;
    background-color: rgba(255, 255, 255, 0.1);
    text-decoration-color: rgba(255, 255, 255, 0.3);
  }
  .crumbs a:hover {
    display: inline-block;
    text-decoration-color: rgba(255, 255, 255, 1);
  }
</style>
